name: 🐳 Build & Push Docker Image

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag (e.g., v1.4.0)'
        required: false
        default: 'auto'

env:
  REGISTRY: docker.io
  IMAGE_NAME: xlokius/hensearch
  
jobs:
  build-and-push:
    name: 🐳 Build and Push Docker Image
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🔍 Check files
      run: |
        echo "📁 Current directory contents:"
        ls -la
        echo ""
        echo "📄 Dockerfile content:"
        cat Dockerfile
        echo ""
        echo "📂 Docs directory:"
        ls -la docs/
    
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: 🏷️ Generate Docker tags
      id: meta
      run: |
        # Generate timestamp
        TIMESTAMP=$(date +%Y%m%d-%H%M%S)
        
        # Get short commit hash
        COMMIT_SHORT=$(git rev-parse --short HEAD)
        
        # Extract version from README.md if exists
        README_VERSION=""
        if [ -f "README.md" ]; then
          README_VERSION=$(grep -oP 'version-\K[0-9]+\.[0-9]+\.[0-9]+' README.md | head -1)
        fi
        
        # Extract version from package.json if exists
        PACKAGE_VERSION=""
        if [ -f "package.json" ]; then
          PACKAGE_VERSION=$(grep -oP '"version":\s*"\K[0-9]+\.[0-9]+\.[0-9]+' package.json)
        fi
        
        # Determine version tag
        if [ "${{ github.event.inputs.version }}" != "" ] && [ "${{ github.event.inputs.version }}" != "auto" ]; then
          VERSION_TAG="${{ github.event.inputs.version }}"
          echo "🎯 Using manual version: ${VERSION_TAG}"
        elif [ -n "$README_VERSION" ]; then
          VERSION_TAG="v${README_VERSION}"
          echo "📖 Using version from README: ${VERSION_TAG}"
        elif [ -n "$PACKAGE_VERSION" ]; then
          VERSION_TAG="v${PACKAGE_VERSION}"
          echo "📦 Using version from package.json: ${VERSION_TAG}"
        else
          # Generate auto version based on date
          VERSION_TAG="v$(date +%Y.%m.%d)"
          echo "🤖 Auto-generated version: ${VERSION_TAG}"
        fi
        
        # Always use latest for main branch
        DOCKER_TAG="latest"
        PUSH_IMAGE="true"
        
        echo "docker-tag=${DOCKER_TAG}" >> $GITHUB_OUTPUT
        echo "version-tag=${VERSION_TAG}" >> $GITHUB_OUTPUT
        echo "commit-short=${COMMIT_SHORT}" >> $GITHUB_OUTPUT
        echo "push-image=${PUSH_IMAGE}" >> $GITHUB_OUTPUT
        echo "timestamp=${TIMESTAMP}" >> $GITHUB_OUTPUT
        
        echo ""
        echo "🏷️ Generated tags:"
        echo "Main tag: ${DOCKER_TAG}"
        echo "Version tag: ${VERSION_TAG}"
        echo "Commit: ${COMMIT_SHORT}"
        echo "Timestamp: ${TIMESTAMP}"
        echo "Will push: ${PUSH_IMAGE}"
    
    - name: 🔐 Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: 🏗️ Build Docker image
      run: |
        echo "🏗️ Building Docker image..."
        
        # Build the image with latest tag
        docker build -t ${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.docker-tag }} .
        
        # Tag with version
        docker tag ${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.docker-tag }} ${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version-tag }}
        
        # Also tag with timestamp for backup
        docker tag ${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.docker-tag }} ${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.timestamp }}
        
        echo "✅ Docker image built successfully"
        
        # Show image info
        echo "📊 Image information:"
        docker images ${{ env.IMAGE_NAME }}
    
    - name: 🧪 Test Docker image
      run: |
        echo "🧪 Testing Docker image..."
        
        # Run container in background
        docker run -d --name test-container -p 8080:80 ${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.docker-tag }}
        
        # Wait for container to start
        echo "⏳ Waiting for container to start..."
        sleep 15
        
        # Check if container is running
        if docker ps | grep -q test-container; then
          echo "✅ Container is running"
        else
          echo "❌ Container failed to start"
          docker logs test-container
          exit 1
        fi
        
        # Test HTTP response
        echo "🌐 Testing HTTP response..."
        for i in {1..10}; do
          if curl -f http://localhost:8080 >/dev/null 2>&1; then
            echo "✅ HTTP test passed"
            break
          fi
          
          if [ $i -eq 10 ]; then
            echo "❌ HTTP test failed after 10 attempts"
            docker logs test-container
            exit 1
          fi
          
          echo "⏳ Attempt $i failed, retrying..."
          sleep 3
        done
        
        # Test page content
        CONTENT=$(curl -s http://localhost:8080 | grep -o "HenSearch\|TMOHentai" | head -1)
        if [ -n "$CONTENT" ]; then
          echo "✅ Page content test passed (found: $CONTENT)"
        else
          echo "❌ Page content test failed"
          curl -s http://localhost:8080 | head -10
        fi
        
        # Cleanup
        docker stop test-container
        docker rm test-container
        
        echo "🎉 All tests passed!"
    
    - name: 🚀 Push to Docker Hub
      run: |
        echo "🚀 Pushing Docker image to Docker Hub..."
        
        # Push all tags
        docker push ${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.docker-tag }}
        docker push ${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version-tag }}
        docker push ${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.timestamp }}
        
        echo "✅ Docker image pushed successfully!"
        echo "🔗 Available at: https://hub.docker.com/r/xlokius/hensearch"
        echo ""
        echo "📦 Pushed tags:"
        echo "- ${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.docker-tag }}"
        echo "- ${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version-tag }}"
        echo "- ${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.timestamp }}"
    
    - name: 📋 Summary
      if: always()
      run: |
        echo "## 🐳 Docker Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📊 Build Information" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: main" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: \`${{ steps.meta.outputs.commit-short }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Version**: \`${{ steps.meta.outputs.version-tag }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Docker Tags**: \`latest\`, \`${{ steps.meta.outputs.version-tag }}\`, \`${{ steps.meta.outputs.timestamp }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ✅ Built and pushed to Docker Hub" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🚀 Usage" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
        echo "# Latest version" >> $GITHUB_STEP_SUMMARY
        echo "docker pull ${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "# Specific version" >> $GITHUB_STEP_SUMMARY
        echo "docker pull ${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version-tag }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "# Run container" >> $GITHUB_STEP_SUMMARY
        echo "docker run -d -p 80:80 --name hensearch ${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔗 Links" >> $GITHUB_STEP_SUMMARY
        echo "- [Docker Hub](https://hub.docker.com/r/xlokius/hensearch)" >> $GITHUB_STEP_SUMMARY
        echo "- [GitHub Repository](${{ github.server_url }}/${{ github.repository }})" >> $GITHUB_STEP_SUMMARY